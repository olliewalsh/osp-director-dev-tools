---
- hosts: localhost
  vars_files: vars/default.yaml
  roles:
    - oc_local

  tasks:
  - name: Set combined osp dict
    set_fact:
      osp: "{{ osp_defaults | combine((osp_release_defaults | default({})), recursive=True) | combine((osp_local | default({})), recursive=True) }}"

  - name: Update CSV
    environment: &oc_env
      PATH: "{{ oc_env_path }}"
      KUBECONFIG: "{{ kubeconfig }}"
    # Can fail if the csv is modified while we alter it
    retries: 5
    delay: 30
    vars:
      jq_set_csv_envvar: '(.items[].spec.install.spec.deployments[].spec.template.spec.containers[] | select(.env != null) | .env[] | select(.name==$envvar)).value |= $envval'
    shell: |
      set -e
      oc get csv -n openstack -o json \
      | jq --arg envvar 'OPENSTACKCLIENT_IMAGE_URL_DEFAULT' --arg envval '{{ openstackclient_image }}' '{{ jq_set_csv_envvar }}' \
      {% if osp.release != 16.2 %} | jq --arg envvar 'OPENSTACK_RELEASE_DEFAULT' --arg envval '"{{ osp.release }}"' '{{ jq_set_csv_envvar }}' {% endif %} \
      \ {% if ephemeral_heat is defined and ephemeral_heat|length %}
      {% if ephemeral_heat.heat_api_image is defined %} | jq --arg envvar 'HEAT_API_IMAGE_URL_DEFAULT' --arg envval '{{ ephemeral_heat.heat_api_image }}' '{{ jq_set_csv_envvar }}' {% endif %} \
      {% if ephemeral_heat.heat_engine_image is defined %} | jq --arg envvar 'HEAT_ENGINE_IMAGE_URL_DEFAULT' --arg envval '{{ ephemeral_heat.heat_engine_image }}' '{{ jq_set_csv_envvar }}' {% endif %} \
      {% if ephemeral_heat.mariadb_image is defined %} | jq --arg envvar 'MARIADB_IMAGE_URL_DEFAULT' --arg envval '{{ ephemeral_heat.mariadb_image }}' '{{ jq_set_csv_envvar }}' {% endif %} \
      {% if ephemeral_heat.rabbit_image is defined %} | jq --arg envvar 'RABBITMQ_IMAGE_URL_DEFAULT' --arg envval '{{ ephemeral_heat.rabbit_image }}' '{{ jq_set_csv_envvar }}' {% endif %} \
      \ {% endif %}
      | oc replace -f -

  - name: Update openstackclient and provision server images
    environment:
      <<: *oc_env
    when: false
    shell: |
      set -e

      if oc get openstackclient -n openstack openstackclient; then
        oc get openstackclient -n openstack openstackclient -o json \
        | jq 'del( .spec.imageURL )' \
        | oc replace -f -
        if oc get pods -n openstack openstackclient; then
          oc delete pod -n openstack openstackclient
          oc wait -n openstack --for=condition=Ready pod/openstackclient --timeout="{{ (default_timeout * 5)|int }}s"
        fi
      fi

      # oc get openstackprovisionserver -n openstack openstack -o json \
      # | jq 'del( .spec.agentImageUrl, .spec.apacheImageUrl, .spec.downloaderImageUrl)' \
      # | oc replace -f -

      if oc get openstackprovisionserver -n openstack openstack; then
        oc wait --for=condition=Provisioned openstackprovisionserver/openstack --timeout="{{ (default_timeout * 5)|int }}s"
      fi

